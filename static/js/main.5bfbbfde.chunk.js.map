{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","CardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","SearchField","target","value","state","fetch","then","response","json","users","FilterRobot","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCDSC,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,yBAAKC,UAAW,sDACZ,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,4BACpB,6BACA,4BAAKF,GACL,2BAAIC,MCMDK,EAZE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAETC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAQO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAE1F,OACA,6BACCO,ICOcK,EAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAC7B,OACI,yBAAKZ,UAAU,eACX,2BACAa,KAAK,SACLC,YAAc,aACdd,UAAU,2CACVe,SAAUH,MCAPI,G,MARD,SAACC,GACX,OACA,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC/DJ,EAAMK,YCwCAC,E,kDApCX,aAAc,IAAD,8BACT,gBAeRC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAfpC,EAAKC,MAAQ,CACT1B,OAAO,GACPuB,YAAY,IAJP,E,gEASO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACtB,OAAO+B,S,+BAQjC,IAAD,OACDC,EAAcC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAAlC,GACzC,OAAOA,EAAOP,KAAK0C,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAErE,OACI,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAeyB,KAAKb,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAUgC,U,GA9BbK,IAAMC,WCDzBC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5bfbbfde.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\r\n    return(\r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow b2 shadow-5'>            \r\n            <img alt='Robot' src={`https://robohash.org/${id}?set=set3&size=300x300`}/>\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n       </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    const CardArray  = robots.map((user, i) =>{\r\n        return <Card key={i} id={robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\r\n    });\r\nreturn(\r\n<div>\r\n{CardArray}\r\n</div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({ searchfield,searchChange }) => {\r\n    return(\r\n        <div className='br-pill pa2'>\r\n            <input \r\n            type='Search'\r\n            placeholder = 'RoboFriend'\r\n            className='br-pill pa3 ba b--green bg-lightest-blue'\r\n            onChange={searchChange}    \r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n    <div style={{ overflowY: 'scroll', border:'1px Solid black', height:'800px'}}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from './CardList';\r\n//import {robots} from './robots';\r\nimport SearchBox from './Searchbox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass  App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            SearchField:''\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots:users}))\r\n        \r\n    }\r\n\r\nonSearchChange =(event) =>{\r\n    this.setState({SearchField:event.target.value});\r\n}    \r\n\r\n   render(){ \r\n    const FilterRobot = this.state.robots.filter(robots =>{\r\n        return robots.name.toLowerCase().includes(this.state.SearchField.toLowerCase());\r\n    })   \r\n    return(\r\n        <div className='tc'>\r\n            <h1 className='f1'> Robo friend</h1>\r\n            <SearchBox searchChange ={this.onSearchChange}/>\r\n            <Scroll>\r\n            <CardList robots = {FilterRobot}/>    \r\n            </Scroll>\r\n        </div>\r\n    );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render( <App/>,  document.getElementById('root'));\n        serviceWorker.unregister();"],"sourceRoot":""}